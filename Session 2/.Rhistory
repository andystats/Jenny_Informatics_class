# Set this working directory to where you want to produce .html file
setwd("/Users/andywilson1/Documents/GitHub/Jenny_Informatics_class/Session 2")
#install.packages("devtools")
#library(devtools)
# devtools::install_github("mattflor/chorddiag")
library(chorddiag)
set.seed(999)
mat = matrix(sample(18, 18), 6, 6)
rownames(mat) = paste0("Rx", 1:6)
colnames(mat) = paste0("Rx", 1:6)
mat
knitr::opts_chunk$set(echo = TRUE)
library(networkD3)
knitr::opts_chunk$set(echo = TRUE)
library(networkD3)
library(plotly)
names <-c(
"Primary Dx", #0
"Rx1",        #1
"Rx2",        #2
"Dx2",        #3
"Rx3",        #4
"Rx4",        #5
"Dx3",        #6
"LTFU",       #7
"Radiology",  #8
"Dies")       #9
nodes = data.frame("name" = names)
links = as.data.frame(matrix(c(
0,1,6861,
1,2,5284,
1,3,1111,
1,4,349,
1,5,117,
2,6,3368,
2,7,1916,
3,8,590,
3,9,1425,
0,8,11979,
8,4,1213,
8,3,1474,
8,5,393,
#8,9, 1000,
3,1,570,
8,6,1000),
byrow = TRUE, ncol = 3))
names(links) = c("source", "target", "value")
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 15, nodeWidth = 30)
p <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = names,
#color = c("blue", "blue", "blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "blue",
width = 0.5
)
),
link = list(
source = links$source,
target = links$target,
value =  links$value
)
) %>%
layout(
title = "Pt Journey",
font = list(family="serif",
size = 13
)
)
p
setwd("/Users/andywilson1/Documents/GitHub/Jenny_Informatics_class/Session 2")
#install.packages("devtools")
#library(devtools)
# devtools::install_github("mattflor/chorddiag")
library(chorddiag)
set.seed(999)
mat = matrix(sample(18, 18), 6, 6)
rownames(mat) = paste0("Rx", 1:6)
colnames(mat) = paste0("Rx", 1:6)
mat
p <- chorddiag(mat, groupnamePadding = 20)
p
mat
# install.packages("hal9001") # giant package
# install.packages("glmnet")
library(hal9001)
library(glmnet)
data(iris)
y <- ifelse(iris$Species == "virginica", 1, 0)
x <- iris[, 1:4]
X <- data.matrix(iris[, 1:4]) # for glmnet, wants in this form
hal_fit <- fit_hal(X = x, Y = y, return_lasso = TRUE,
yolo = TRUE)
hal_fit
hal_fit$coefs
hal_fit <- fit_hal(X = x, Y = y,
yolo = TRUE)
print(summary(hal_fit))
summary(hal_fit)$table
summary(hal_fit)$table$coef
print(summary(hal_fit)$table$coef )
summary(hal_fit)
print(xtable(summary(fit)$table, type = "latex"), file = "haltbl_meow.tex")
library(xtable)
print(xtable(summary(fit)$table, type = "latex"), file = "haltbl_meow.tex")
print(xtable(summary(hal_fit)$table, type = "latex"), file = "haltbl_meow.tex")
?xtable
print(xtable(summary(hal_fit)$table, type = "html"), file = "haltbl_meow.html")
xtable(summary(hal_fit)$table, type = "html")
knitr::opts_chunk$set(echo = TRUE,
error=FALSE,
warning = FALSE,
message= FALSE)
#install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
library(zoo)
library(ggthemes)
mydata <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"), na.strings = c("", "NA"))
deaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"), na.strings = c("", "NA"))
State <- "Utah"
k = 20 #future days
CASES <- mydata %>%
filter(Province_State ==State) %>%
select(starts_with("X"))
Y<- colSums(CASES)
n <- as.numeric(length(Y))
temp1 <- data.frame(y = Y, x = seq(1:n))
temp1$date<-row.names(temp1)
temp <- temp1 %>% filter(y > 0)
(date1<-substr(temp[1,]$date, 2, 8))
(date<-substr(temp[temp$x==max(temp$x),]$date, 2, 8))
(Max <- temp[temp$x==max(temp$x),]$y)
head(temp)
last_obs <- max(temp$x)
next_last_obs <- last_obs - 1
seven_days_ago <- last_obs - 7
new_cases <- temp[ temp$x ==last_obs , 1] - temp[ temp$x ==next_last_obs , 1]
one_day_percent <- (temp[ temp$x ==last_obs , 1] - temp[ temp$x ==next_last_obs , 1])/temp[ temp$x ==next_last_obs, 1] *100
seven_days_percent <- (temp[ temp$x ==last_obs , 1] - temp[ temp$x ==seven_days_ago , 1])/temp[ temp$x ==seven_days_ago, 1] *100
par(family="serif")
plot(temp$x, temp$y, ylab = "COVID SARS-2 Confirmed Cases", xlab="", xlim =c(min(temp$x),n+k),
ylim=c(0, max(temp$y) + 0.25*max(temp$y)), type="l", col="navy", lwd=3,
axes=F,
main = paste("COVID-19 cases in", State, " (updated", date , ")"),
sub = "Using 2019 Novel Coronavirus COVID-19 (2019-nCoV)
Data Repository by Johns Hopkins CSSE")
axis(2)
axis(1, at=c(temp[1,2], max(temp$x) ), lab=c(date1, date))
par(family="serif")
plot(temp$x, temp$y, ylab = "COVID SARS-2 Confirmed Cases", xlab="", xlim =c(min(temp$x),n+k),
ylim=c(0, max(temp$y) + 0.25*max(temp$y)), type="l", col="navy", lwd=3,
axes=F,
main = paste("COVID-19 cases in", State, " (updated", date , ")"),
sub = "Using 2019 Novel Coronavirus COVID-19 (2019-nCoV)
Data Repository by Johns Hopkins CSSE")
axis(2)
axis(1) #, at=c(temp[1,2], max(temp$x) ), lab=c(date1, date))
y <- temp$y
x <- temp$x
Z <- nls(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=c(a1=100,k1=300000, b1=500,
a2=450,k2=800000,b2=750))
y <- temp$y
x <- temp$x
Z <- nls(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=c(a1=200,k1=300000, b1=500,
a2=300,k2=700000,b2=700))
library(minpack.lm)
install.packages("minpack.lm")
library(minpack.lm)
y <- temp$y
x <- temp$x
Z <- nlsLM(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=list(a1=200,k1=300000, b1=500,
a2=300,k2=700000,b2=700))
ZZ<-summary(Z)
peak <- ZZ$parameters[1]
midpoint <- temp %>%
filter(x == round(ZZ$parameters[2])) %>%
mutate(date = str_sub(date, 2, 8)) %>%
select(date)
round(peak) # estimated asymptote
library(minpack.lm)
y <- temp$y
x <- temp$x
Z <- nlsLM(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=list(a1=200,k1=300000, b1=500,
a2=300,k2=700000,b2=700))
ZZ<-summary(Z)
ZZ
# peak <- ZZ$parameters[1]
# midpoint <- temp %>%
#   filter(x == round(ZZ$parameters[2])) %>%
#   mutate(date = str_sub(date, 2, 8)) %>%
#   select(date)
AIC(Z) # AIC = -2LL + 2k
BIC(Z)
# pdf("curve.pdf", width = 12, height = 12)
# png(file = "curve.png", width = 1080, height = 900, units = "px", pointsize = 14)
par(family="serif")
plot(temp$x, temp$y, ylab = "COVID SARS-2 Confirmed Cases", xlab="", xlim =c(min(temp$x),n+k),
ylim=c(0, max(temp$y) + 0.25*max(temp$y)), type="l", col="navy", lwd=3,
axes=F,
main = paste("COVID-19 cases in", State, " (updated", date , ")"),
sub = "Using 2019 Novel Coronavirus COVID-19 (2019-nCoV)
Data Repository by Johns Hopkins CSSE")
axis(2)
axis(1, at=c(temp[1,2], max(temp$x) ), lab=c(date1, date))
lines(seq(1:n), predict(Z, list(x = seq(1:n))), lwd=2, col='blue', lty=3)
abline( h = max(temp$y), lty=3)
#abline( h = ZZ$parameters[1], lty=3)
#abline(v=temp[temp$date == "X8.18.20",]$x, lty=2, col="red")
text(max(temp$x)-120, max(temp$y) -24000, paste("Daily new cases = ", new_cases ))
text(max(temp$x)-120, max(temp$y)-16000, paste("Daily percent increase = ", round(one_day_percent,1), "%" ))
text(max(temp$x)-120, max(temp$y)-8000, paste("Seven-day percent increase = ", round(seven_days_percent,1), "%" ))
#text(max(temp$x)-80, ZZ$parameters[1]-2000, paste("Estimated case asymptote = ", round(ZZ$parameters[1])), col="grey")
#text(n,  1000, paste("model AIC = ", round(AIC(Z),2), "\n (smaller is better)"),col="grey")
Z10 <- round(predict(Z, list(x = seq(n+1,n+k))))
#k-day forecast
Z10[1:k]
lines(seq(n+1,n+k), Z10[1:k], col="lightblue", lwd=2, lty=2)
# dev.off()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
library(zoo)
library(ggthemes)
plot(x,y, ylab = "Cumulative case count", xlab = "days since first case", axes=F); axis(1); axis(2)
newx  <- seq(50,400)
lines(newx,predict(bilogistic,newdata=data.frame(x=newx)),lwd=2, lty=2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
library(zoo)
library(ggthemes)
#install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
library(zoo)
library(ggthemes)
mydata <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"), na.strings = c("", "NA"))
deaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"), na.strings = c("", "NA"))
State <- "Utah"
k = 20 #future days
CASES <- mydata %>%
filter(Province_State ==State) %>%
select(starts_with("X"))
Y<- colSums(CASES)
n <- as.numeric(length(Y))
temp1 <- data.frame(y = Y, x = seq(1:n))
temp1$date<-row.names(temp1)
temp <- temp1 %>% filter(y > 0)
(date1<-substr(temp[1,]$date, 2, 8))
(date<-substr(temp[temp$x==max(temp$x),]$date, 2, 8))
(Max <- temp[temp$x==max(temp$x),]$y)
head(temp)
last_obs <- max(temp$x)
next_last_obs <- last_obs - 1
seven_days_ago <- last_obs - 7
new_cases <- temp[ temp$x ==last_obs , 1] - temp[ temp$x ==next_last_obs , 1]
one_day_percent <- (temp[ temp$x ==last_obs , 1] - temp[ temp$x ==next_last_obs , 1])/temp[ temp$x ==next_last_obs, 1] *100
seven_days_percent <- (temp[ temp$x ==last_obs , 1] - temp[ temp$x ==seven_days_ago , 1])/temp[ temp$x ==seven_days_ago, 1] *100
library(minpack.lm)
y <- temp$y
x <- temp$x
Z <- nlsLM(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=list(a1=200,k1=300000, b1=500,
a2=300,k2=700000,b2=700))
ZZ<-summary(Z)
ZZ
peak <- ZZ$parameters[1]
midpoint <- temp %>%
filter(x == round(ZZ$parameters[2])) %>%
mutate(date = str_sub(date, 2, 8)) %>%
select(date)
round(peak) # estimated asymptote
midpoint # date of inflection point
AIC(Z) # AIC = -2LL + 2k
BIC(Z)
# pdf("curve.pdf", width = 12, height = 12)
# png(file = "curve.png", width = 1080, height = 900, units = "px", pointsize = 14)
par(family="serif")
plot(temp$x, temp$y, ylab = "COVID SARS-2 Confirmed Cases", xlab="", xlim =c(min(temp$x),n+k),
ylim=c(0, max(temp$y) + 0.25*max(temp$y)), type="l", col="navy", lwd=3,
axes=F,
main = paste("COVID-19 cases in", State, " (updated", date , ")"),
sub = "Using 2019 Novel Coronavirus COVID-19 (2019-nCoV)
Data Repository by Johns Hopkins CSSE")
axis(2)
axis(1, at=c(temp[1,2], max(temp$x) ), lab=c(date1, date))
lines(seq(1:n), predict(Z, list(x = seq(1:n))), lwd=2, col='blue', lty=3)
abline( h = max(temp$y), lty=3)
#abline( h = ZZ$parameters[1], lty=3)
#abline(v=temp[temp$date == "X8.18.20",]$x, lty=2, col="red")
text(max(temp$x)-120, max(temp$y) -24000, paste("Daily new cases = ", new_cases ))
text(max(temp$x)-120, max(temp$y)-16000, paste("Daily percent increase = ", round(one_day_percent,1), "%" ))
text(max(temp$x)-120, max(temp$y)-8000, paste("Seven-day percent increase = ", round(seven_days_percent,1), "%" ))
#text(max(temp$x)-80, ZZ$parameters[1]-2000, paste("Estimated case asymptote = ", round(ZZ$parameters[1])), col="grey")
#text(n,  1000, paste("model AIC = ", round(AIC(Z),2), "\n (smaller is better)"),col="grey")
Z10 <- round(predict(Z, list(x = seq(n+1,n+k))))
#k-day forecast
Z10[1:k]
lines(seq(n+1,n+k), Z10[1:k], col="lightblue", lwd=2, lty=2)
# dev.off()
mydata0 <-read.csv(url("https://raw.githubusercontent.com/CivilServiceUSA/us-governors/master/us-governors/data/us-governors.csv"), na.strings = c("", "NA")) %>%
dplyr::select(state_code, state_name, party) %>%
rename(state = state_code)
mydata2 <-read.csv(url("https://covidtracking.com/api/v1/states/daily.csv"), na.strings = c("", "NA"))
mydf <- merge(mydata0, mydata2 , by="state")
mydf$Date <- as.Date(as.character(mydf$date), "%Y %m %d")
State  = "UT"
St <- mydata2 %>%
filter(state==State) %>%
filter(positiveIncrease > 0)
St$Date <- as.Date(as.character(St$date), "%Y %m %d")
theme_set(theme_few(base_size = 14, base_family = "serif"))
min <- as.Date("2020-4-1")
max <- NA
r<- ggplot(
St,
aes(x = Date , y = positiveIncrease)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
#facet_wrap(mydf$state_name, scales = "free") +
geom_line(aes(y=rollmean(positiveIncrease, 7, na.pad=TRUE), size=1.5))+
geom_smooth()  + #ylim(0, 1500) +
#geom_point(aes(x = as.Date("2020-09-25"), y=1411), colour="red", size=1.5) +
scale_color_manual(values = c("#00AFBB", "#FC4E07")) +
labs(x = "", y = "Daily Positive Increase", title = paste("COVID Daily positive increase in", State, "
(with 7-day moving average)", "
Update: ", date)) + scale_x_date(limits = c(min, max)) +
theme(legend.position = "none")
# r <- r + geom_vline(xintercept=St[St$Date=="2020-08-05",55],
#                linetype=4, colour="red")
#+ annotate("text", x = as.Date("2020-08-5"), y=5, label = "Inflection (2)")
# pdf("UT.pdf", width = 12, height = 10)
# png(file = "UT.png", width = 1080, height = 900, units = "px", pointsize = 14)
r
# dev.off()
library(dygraphs)
library(xts)
cases.ts <- xts(St$positiveIncrease, order.by=as.POSIXct(St$Date))
dygraph(cases.ts, main = paste("Daily increase COVID cases in", State)) %>%
dyRoller(rollPeriod = 5) %>%
dySeries("V1", strokeWidth = 3, label = "5-day rolling daily case increase") %>%
dyShading(from = "2021-01-01", to = Sys.Date(), color = "#FFE6E6") %>%
dyRangeSelector()
State <- "Utah"
CASES <- mydata %>%
filter(Province_State ==State) %>%
select(starts_with("X"))
Y<- colSums(CASES)
n <- as.numeric(length(Y))
temp1 <- data.frame(y = Y, x = seq(1:n))
temp1$date<-row.names(temp1)
temp <- temp1 %>% filter(y > 0)
y <- temp$y
x <- temp$x
bilogistic <- nlsLM(y ~  (( k1 / (1 + exp( (-log(81)/a1) * (x - b1)))) +
( k2 / (1 + exp( (-log(81)/a2) * (x - b2))))),
start=list(a1=200,k1=300000, b1=500,
a2=300,k2=700000,b2=700))
bilogistic
plot(x,y, ylab = "Cumulative case count", xlab = "days since first case", axes=F); axis(1); axis(2)
newx  <- seq(50,800)
lines(newx,predict(bilogistic,newdata=data.frame(x=newx)),lwd=2, lty=2)
AIC(bilogistic)
BIC(bilogistic)
plot(x,y, xlim = c(0,900), ylim = c(0, 1000000), ylab = "Cumulative case count", xlab = "days since first case", axes=F); axis(1); axis(2)
newx  <- seq(50,800)
lines(newx,predict(bilogistic,newdata=data.frame(x=newx)),lwd=2, lty=2)
AIC(bilogistic)
BIC(bilogistic)
plot(x,y, xlim = c(0,900), ylim = c(0, 1000000), ylab = "Cumulative case count", xlab = "days since first case", axes=F); axis(1); axis(2)
newx  <- seq(50,800)
lines(newx,predict(bilogistic,newdata=data.frame(x=newx)),lwd=2, lty=2)
AIC(bilogistic)
BIC(bilogistic)
